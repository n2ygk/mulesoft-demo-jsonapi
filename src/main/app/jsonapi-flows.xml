<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd">
    <objectstore:config name="ObjectStore__Connector" objectStore-ref="_defaultUserObjectStore" entryTtl="0" persistent="true" doc:name="ObjectStore: Connector" />
    <flow name="jsonapiPOSTitem">
        <object-to-string-transformer doc:name="Object to String"/>
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
        <scripting:transformer doc:name="Set id &amp; key">
            <scripting:script engine="jython"><![CDATA[import uuid
flowVars['id'] = str(uuid.uuid4())
payload['id'] = flowVars['id']
flowVars['key'] = payload['type']+':'+flowVars['id']
result = payload]]></scripting:script>
        </scripting:transformer>
        <set-variable variableName="links.self" value="#[message.inboundProperties.'http.scheme'+'//:'+message.inboundProperties.host+message.inboundProperties.'http.request.uri'+'/'+flowVars.id]" doc:name="links.self"/>
        <objectstore:store config-ref="ObjectStore__Connector" key="#[flowVars.key]" value-ref="#[payload]" doc:name="Store Object"/>
        <set-property propertyName="http.status" value="201" doc:name="Set 201 status"/>
        <set-property propertyName="location" value="#[message.inboundProperties.'http.scheme'+'://'+message.inboundProperties.host+message.inboundProperties.'http.request.uri'+'/'+flowVars.id]" doc:name="Set Location header"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <set-payload value="{&quot;data&quot;: #[payload], &quot;links&quot;: {&quot;self&quot;: &quot;#[flowVars.'links.self']&quot;}}" mimeType="application/vnd.api+json" doc:name="Set Payload"/>
    </flow>

    <flow name="jsonapiGETitem" doc:description="Get item with id &lt;type&gt;:id. Infers the type from the http.request.path??? or just expect it to be set upstream?">
        <set-variable variableName="key" value="#[flowVars.type+':'+message.inboundProperties.'http.uri.params'.id]" doc:name="Set type:id key"/>
        <set-variable variableName="links.self" value="#[message.inboundProperties.'http.scheme'+'://'+message.inboundProperties.host+message.inboundProperties.'http.request.path']" doc:name="links.self"/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[flowVars.key]" doc:name="Get Object"/>
        <flow-ref name="collect-included-keys" doc:name="collect included"/>
        <flow-ref name="get-included-resources" doc:name="add item included"/>
        <flow-ref name="build-response" doc:name="build response"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <object-to-string-transformer mimeType="application/vnd.api+json" doc:name="Object to String"/>
    </flow>
    <flow name="jsonapiGETcollection" doc:description="TODO: Fix this to properly wrap data.">
        <objectstore:retrieve-all-keys config-ref="ObjectStore__Connector" doc:name="Get All Keys"/>
        <set-variable variableName="links.self" value="#[message.inboundProperties.'http.scheme'+'://'+message.inboundProperties.host+message.inboundProperties.'http.request.uri']" doc:name="links.self"/>
        <set-variable variableName="outputList" value="#[new java.util.ArrayList()]" doc:name="new outputList"/>
        <foreach doc:name="For Each">
            <expression-filter expression="#[flowVars.type == null || payload.contains(flowVars.type)]" doc:name="Type filter"/>
            <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[payload]" doc:name="Fetch value"/>
            <scripting:transformer doc:name="add links.self for each item">
                <scripting:script engine="jython"><![CDATA[import java.util.HashMap
import org.mule.transport.NullPayload
if payload != org.mule.transport.NullPayload.getInstance() and 'type' in payload and 'id' in payload:
    basepath = message.getInboundProperty('http.scheme')+ '://' + message.getInboundProperty('host') + message.getInboundProperty('http.listener.path')[:-1]
    payload['links'] = java.util.HashMap()
    payload['links']['self'] = basepath + payload['type'] + '/' + payload['id']
result = payload]]></scripting:script>
            </scripting:transformer>
            <flow-ref name="collect-included-keys" doc:name="collect included keys"/>
            <expression-transformer expression="#[flowVars.outputList.add(payload)]" doc:name="add collection item to list"/>
        </foreach>
        <set-payload value="#[flowVars.outputList]" doc:name="Set Payload"/>
        <flow-ref name="get-included-resources" doc:name="get included resources"/>
        <flow-ref name="build-response" doc:name="build response"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <object-to-string-transformer doc:name="Object to String" mimeType="application/vnd.api+json"/>
    </flow>
    <flow name="jsonapiGETrelationships">
        <set-variable variableName="key" value="#[flowVars.type+':'+message.inboundProperties.'http.uri.params'.id]" doc:name="Set type:id key"/>
        <set-variable variableName="links.self" value="#[message.inboundProperties.'http.scheme'+'://'+message.inboundProperties.host+message.inboundProperties.'http.request.uri']" doc:name="links.self"/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[flowVars.key]" doc:name="Get Object"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <scripting:transformer mimeType="application/java" doc:name="filter relationship">
            <scripting:script engine="jython"><![CDATA[result = payload['relationships'][flowVars['relationship']]
]]></scripting:script>
        </scripting:transformer>
        <flow-ref name="build-response" doc:name="build response"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <object-to-string-transformer mimeType="application/vnd.api+json" doc:name="Object to String"/>
    </flow>
    <sub-flow name="collect-included-keys">
        <scripting:transformer doc:name="relationships -&gt; included" doc:description="parse out included resources identifiers (type:id) so they can be included.">
            <scripting:script engine="jython"><![CDATA[import java.util.ArrayList
import java.util.HashMap
if 'relationships' in payload:
  print "RELATIONSHIPS"
  rels = payload['relationships']
  if 'includeKeys' not in flowVars:
    flowVars['includeKeys'] = java.util.ArrayList()
  for relname in rels:
  	print "        REL %s = %s"%(relname,rels[relname])
  	if 'data' in rels[relname]:
  		data = rels[relname]['data']
  		print "          DATA %s"%data
  		if isinstance(data,java.util.HashMap): # single item
  			data = [data] # make a list of 1
  		for datum in data:
  			print "type: %s id: %s"%(datum['type'],datum['id'])
  			key = datum['type']+':'+datum['id']
  			if key not in flowVars['includeKeys']:
  				flowVars['includeKeys'].append(key)
  if len(flowVars['includeKeys']) and 'included' not in flowVars:
    flowVars['included'] = java.util.ArrayList()
result = payload]]></scripting:script>
        </scripting:transformer>
    </sub-flow>
    <flow name="get-included-resources">
        <logger level="INFO" doc:name="Logger"/>
        <scripting:transformer doc:name="set basepath">
            <scripting:script engine="jython"><![CDATA[flowVars['basepath'] = message.getInboundProperty('http.scheme')+ '://' + message.getInboundProperty('host') + message.getInboundProperty('http.listener.path')[:-1]
result = payload]]></scripting:script>
        </scripting:transformer>
        <foreach collection="#[flowVars.includeKeys]" doc:name="For Each">
            <flow-ref name="fetch-includes" doc:name="fetch includes"/>
            <scripting:transformer doc:name="add links.self">
                <scripting:script engine="jython"><![CDATA[import java.util.HashMap
import org.mule.transport.NullPayload
if payload != org.mule.transport.NullPayload.getInstance() and 'type' in payload and 'id' in payload:
    payload['links'] = java.util.HashMap()
    payload['links']['self'] = flowVars['basepath'] + payload['type'] + '/' + payload['id']
result = payload]]></scripting:script>
            </scripting:transformer>
            <expression-transformer expression="#[flowVars.included.add(payload)]" doc:name="add payload to outputlist"/>
        </foreach>
    </flow>
    <flow name="fetch-includes">
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[payload]" doc:name="Fetch"/>
        <choice-exception-strategy doc:name="choice exception strategy">
            <catch-exception-strategy when="#[exception.causedBy(org.mule.api.store.ObjectDoesNotExistException)]" doc:name="Catch Exception Strategy">
                <logger level="WARN" doc:name="Logger" message="caught missing object exception: #[exception.cause.message]"/>
                <set-payload value="#[null]" doc:name="Set Payload"/>
            </catch-exception-strategy>
        </choice-exception-strategy>
    </flow>
    <sub-flow name="build-response">
        <scripting:transformer mimeType="application/java" doc:name="response map" doc:description="output">
            <scripting:script engine="jython"><![CDATA[import java.util.HashMap
result = java.util.HashMap()
result['data'] = payload
result['links'] = java.util.HashMap()
result['links']['self'] = flowVars['links.self']
if 'included' in flowVars:
  if None in flowVars['included']:
    flowVars['included'].remove(None) # remove nulls (missing included resources)
  result['included'] = flowVars['included']

]]></scripting:script>
        </scripting:transformer>
    </sub-flow>
    <flow name="jsonapiDELETEitem" doc:description="Delete item with id &lt;type&gt;:id.">
        <set-variable variableName="key" value="#[flowVars.type+':'+message.inboundProperties.'http.uri.params'.id]" doc:name="Set type:id key"/>
        <objectstore:remove config-ref="ObjectStore__Connector" key="#[flowVars.key]" doc:name="Delete Object"/>
        <set-property propertyName="http.status" value="204" doc:name="Set 204 status"/>
        <set-payload value="#[null]" doc:name="Set Payload"/>
    </flow>
    <flow name="jsonapiPATCHitem" doc:description="Update the item of given type and id">
        <set-variable variableName="key" value="#[flowVars.type+':'+message.inboundProperties.'http.uri.params'.id]" doc:name="Set type:id key"/>
        <set-variable variableName="links.self" value="#[message.inboundProperties.'http.scheme'+'://'+message.inboundProperties.host+message.inboundProperties.'http.request.path']" doc:name="links.self"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <set-variable variableName="update_data" value="#[payload]" doc:name="Save update_data"/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[flowVars.key]" doc:name="Get Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <scripting:transformer doc:name="Merge update">
            <scripting:script engine="jython"><![CDATA[import json
import PatchConflictException
print "Update data %s"%flowVars['update_data']
print "Payload %s"%payload
x = json.loads(payload)
y = json.loads(flowVars['update_data'])
print "x = %s"%x
print "y = %s"%y
if x['type'] != y['type'] or x['id'] != y['id']:
    raise PatchConflictException('Types or IDs do not match')
for topkey in ['attributes','relationships']:
    if topkey in y:
	    print "topkey: %s"%topkey
	    for k in y[topkey]:
	    	print "  k: %s"%k
	        x[topkey][k] = y[topkey][k]
print "updated payload = %s"%x
result = json.dumps(x)]]></scripting:script>
        </scripting:transformer>
        <logger message="After merge: #[payload]" level="INFO" doc:name="Logger"/>
        <json:json-to-object-transformer doc:name="JSON to Object"/>
        <objectstore:store config-ref="ObjectStore__Connector" key="#[flowVars.key]" value-ref="#[payload]" doc:name="Replace Object" overwrite="true"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <set-payload value="{&quot;data&quot;: #[payload], &quot;links&quot;: {&quot;self&quot;: &quot;#[flowVars.'links.self']&quot;}}" mimeType="application/vnd.api+json" doc:name="Set Payload"/>
    
    </flow>
    <flow name="jsonapi-clearObjectStore" doc:description="Utility to clear the object store. Use with caution.">
        <objectstore:retrieve-all-keys config-ref="ObjectStore__Connector"  doc:name="Retrieve all keys"/>
        <foreach doc:name="For Each">
            <objectstore:remove config-ref="ObjectStore__Connector" key="#[payload]" doc:name="Remove"/>
        </foreach>
        <set-property propertyName="http.status" value="204" doc:name="Set 204 status"/>
        <set-payload value="#[null]" doc:name="Set Payload"/>
    </flow>
    <flow name="jsonapiQueryParamsValidation" doc:description="Validate that only allowed json:api query parameters are present.">
<!--         <scripting:transformer doc:name="Python"> -->
<!--             <scripting:script engine="jython"><![CDATA[import org.mule.module.apikit.exception.BadRequestException -->
<!-- raise org.mule.module.apikit.exception.BadRequestException("foo") -->
<!-- ]]></scripting:script> -->
<!--         </scripting:transformer> -->
        <scripting:transformer doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[def QPnames = ['page','sort','fields','filter','include']
def props = message.getInboundProperty('http.query.params')
props.each{ k, v ->
  println "GROOVY: "+k
  def key = k.replaceFirst(/\[.*$/,"")
  if (!QPnames.contains(key)) throw new org.mule.module.apikit.exception.BadRequestException('unexpected query parameter: '+key)
}
]]></scripting:script></scripting:transformer>
    </flow>

</mule>
