#%RAML 1.0 Library
# traits (sorting, filtering), resourceTypes (collections, items) etc. are defined in jsonApiCollections.raml
usage: >
  This library defines RAML types for [{json:api} 1.0](http://jsonapi.org/format) RESTful API responses.
  
  This library of RAML types is derived directly from the json-api 1.0 [specification](https://github.com/json-api/json-api/blob/gh-pages/schema)
  which is coded using the [json-schema.org](http://json-schema.org/documentation.html) specification. 
  
  The following CHANGES have been made from the schema's YAML:
    - resource type is redefined a subclass of resource\_post because id is _not_ required for POST request body 
      whereas it is mandatory for response body.
    - I couldn't represent allOf for `links` so made a `pagelinks` type which extends `link`.
    - Fix attributes and relationships types (patternProperties not directly mappable to RAML)
    - Move type: up for readability and changed type: array/items: into just type: itemtype[]
    - Make linkage a subclass of resource rather than object.
  
  See the related jsonApiCollections.raml Library for useful resourceTypes and traits that uses these types.
  
  Jsonapi uses mediatype `application/vnd.api+json` in requests and responses. 

  Example usage:
  ```
  uses:
    api: jsonApiLibrary.raml
  ...
  /widgets:
    get:
      responses: 
        200:
          body: 
            application/vnd.api+json:
              type: api.success
              properties: 
                data: widget[]
  ```
  
  Make your API-specific `data` types subclasses of api.resource and your methods should use type api.success
  for successful responses and api.failure for failure responses.
  
  For reasons I don't quite understand, you must use this with the same `uses` key name
  (api) in your main api.raml and any other libraries that reference types defined here.
  
  This file is mostly machine-generated by reading the jsonapi.json 1.0 schema and converting to YAML and then RAML.
  
  The json-api specification used to create this derivative work is in the public domain under a 
  [Creative Commons Zero v1.0 Universal](https://creativecommons.org/publicdomain/zero/1.0/) license.
  
  This derivative work is:
    
  Copyright (c) 2017 The Trustess of Columbia University in the City of New York
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

types:
  success:
    description: A succesful (2xx) response body.
    type: object
    additionalProperties: false
    properties:
      data:
        type: data
        required: true
      included:
        type: resource[]
        required: false
        description: To reduce the number of HTTP requests, servers **MAY** allow responses that include related resources along with the requested primary resources. Such responses are called "compound documents".
        uniqueItems: true
      meta:
        type: meta
        required: false
      links:
        type: pagelinks # had to add this manually due to no RAML allOf
        required: false
        description: Link members related to the primary data.
      jsonapi:
        type: jsonapi
        required: false
  failure:
    description: A failure (4xx) response body.
    type: object
    additionalProperties: false
    properties:
      errors:
        type: error[]
        required: true
        uniqueItems: true
      meta:
        type: meta
        required: false
      jsonapi:
        type: jsonapi
        required: false
      links:
        type: links
        required: false
  info:
    description: An information-only response body.
    type: object
    additionalProperties: false
    properties:
      meta:
        type: meta
        required: true
      links:
        type: links
        required: false
      jsonapi:
        type: jsonapi
        required: false
  meta:
    description: Where specified, a meta member can be used to include non-standard meta-information.
    type: object
    additionalProperties: true
  data:
    description: The document's \"primary data\" is a representation of the resource or collection of resources.
    type: resource | resource[] | nil
  resource:
    description: A resource must have both a type and id. Additional properties (see resource_post) are optional.
    type: resource_post
    properties:
      id:
        required: true
  resource_post:
    description: A postable resource does not require the `id` property as it is generally assigned by the posting server.
    type: object
    additionalProperties: false
    properties:
      type:
        type: string
        required: true
      id:
        type: string
        required: false
      attributes:
        type: attributes
        required: false
      relationships:
        type: relationships
        required: false
      links:
        type: links
        required: false
      meta:
        type: meta
        required: false

  # json:api uses json-schema patternProperties to disallow certain reserved words:
  #  ^(?!relationships$|links$|id$|type$). Unable to represent this in RAML.
  attributes:                                                                                
    additionalProperties: true 
    description: Members of the attributes object ("attributes") represent information                    
      about the resource object in which it's defined.
    type: object
  relationshipLinks:
    type: object
    additionalProperties: true
    properties:
      self:
        type: link
        required: false
        description: A `self` member, whose value is a URL for the relationship itself (a "relationship URL"). This URL allows the client to directly manipulate the relationship. For example, it would allow a client to remove an `author` from an `article` without deleting the people resource itself.
      related:
        type: link
        required: false
  links:
    type: object
    additionalProperties: true
  pagelinks:
    type: pagination
    properties:
      self:
        type: link
    additionalProperties: false
  link:
    type: string | linkobject
  linkobject:
    type: object
    properties:
      href:
        type: uristring
        description: A string containing the link's URL.
      meta:
        type: meta
  # json:api uses json-schema patternProperties to disallow certain reserved words:
  #  ^(?!id$|type$). Unable to represent this in RAML also because the relationships
  # type is a two-level object where the top-level keys are user-defined. Split up
  # into relationship and relationshipMember.
  relationshipMember:
    type: object
    description: Members of the relationships object ("relationships") represent references
      from the resource object in which it's defined to other resource objects.
      ANY of data,links,meta.
    properties: 
      data:
        type: relationshipToOne | relationshipToMany
        required: false
      links:
        type: relationshipLinks
        required: false
      meta:
        type: meta
        required: false
    additionalProperties: false
  relationships:
    type: object
    additionalProperties: true 
  relationshipToOne:
    type: empty | linkage
    description: References to other resource objects in a to-one (\"relationship\"). Relationships can be specified by including a member in a resource's links object.
  relationshipToMany:
    type: linkage[]
    description: An array of objects each containing \"type\" and \"id\" members for to-many relationships.
    uniqueItems: true
  empty:
    type: nil
  linkage:
    type: resource
    additionalProperties: false
    properties:
      type:
        type: string
        required: true
      id:
        type: string
        required: true
      meta:
        type: meta
        required: false
  pagination:
    type: object
    properties:
      first:
        type: uristring | nil # oneOf
        required: false
        description: The first page of data
      last:
        type: uristring | nil # oneOf
        required: false
        description: The last page of data
      prev:
        type: uristring | nil # oneOf
        required: false
        description: The previous page of data
      next:
        type: uristring | nil # oneOf
        required: false
        description: The next page of data
  uristring:
    type: string # TODO uri-reference format
  jsonapi:
    type: object
    additionalProperties: false
    properties:
      version:
        type: string
        required: false
      meta:
        type: meta
        required: false
  error:
    type: object
    additionalProperties: false
    properties:
      id:
        type: string
        required: false
        description: A unique identifier for this particular occurrence of the problem.
      links:
        type: links
        required: false
      status:
        type: string
        required: false
        description: The HTTP status code applicable to this problem, expressed as a string value.
      code:
        type: string
        required: false
        description: An application-specific error code, expressed as a string value.
      title:
        type: string
        required: false
        description: A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
      detail:
        type: string
        required: false
        description: A human-readable explanation specific to this occurrence of the problem.
      source:
        type: object
        required: false
        properties:
          pointer:
            type: string
            description: A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
          parameter:
            type: string
            description: A string indicating which query parameter caused the error.
      meta:
        type: meta
        required: false
